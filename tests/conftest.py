import pytest # импортируется для добавления декораторов в код(декораторы принадлежат библиотеке petest, а не playwright)
from typing import Generator # стандартный модуль Python, который содержит инструменты для аннотации типов (type hints) в коде.
# Generator[T, Send, Return] точно описывает «фикстуру-генератор с yield»: что она отдаёт, что может принимать через .send() и что возвращает по return.
from playwright.sync_api import sync_playwright, Page, Browser # Синхронный API Playwright + Browser и Page импортируются для аннотаций и автодополнения в IDE. 


# создание объекта браузера, который будет запускать процесс "браузер" 1 раз за прогон и передаваться в связанные других классов объекты.
@pytest.fixture(scope='session') # Регистрирует фикстуру, область жизни — «сессия» (один раз на весь прогон). 
# session - потому-что запускать целый браузер «на каждый тест» дорого. 
# Один браузер на прогон экономит секунды на каждом тесте.
def chromium_browser() -> Generator[Browser, None, None]: # Имя фикстуры — chromium_browser. Тип возвращаемого значения — генератор, который отдаст тип Browser
    with sync_playwright() as p: # Запускает Playwright-драйвер и гарантированно останавливает его при выходе из блока.
        # Только здесь, а не в фикстуре страницы - «движок» должен жить столько же, сколько браузер. 
        # Если открыть второй with в фикстуре страницы, он создаст независимый драйвер и закроет его раньше времени(вместе со страницей).
        browser: Browser = p.chromium.launch(headless=False) # создание chromium браузера с типом Browser(объект класса Brouser)
        try: # блок кода, который может завершиться чем угодно (даже исключением)
            yield browser # Всё, что до yield — это setup (подготовка к выполнению сценария). Сам yield browser — передаёт объект browser в тест, который использует эту фикстуру.
            # Всё, что после yield — это teardown(пост-условия)
        finally: # блок, который выполнится в любом случае. 
            # finally гарантирует, например, закрытие даже при падении тестов. Это избавляет от мёртвых процессов.
            browser.close() # действие для finally - закрыть браузер
# ВАЖНО: Почему нужен finally, ведь есть with sync_playwright(), который выходит из операции по завершении? 
# with закрывает сам Playwright-драйвер - !не созданный процесс!, но корректный порядок: сначала закрыть browser(процесс), затем выходить из with (закрывая сам Playwright-драйвер).

# создание объекта страницы, который будет передаваться в тесты и создавать новую страницу для каждой новой функции
@pytest.fixture(scope='function')
def chromium_page(chromium_browser: Browser) -> Generator[Page, None, None]:
    page: Page = chromium_browser.new_page()
    try:
        yield page
    finally:
        page.close()